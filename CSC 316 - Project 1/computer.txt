A
computer
is
a
programmable
machine
that
receives
input
stores
and
manipulates
data
information
and
provides
output
in
a
useful
format
While
a
computer
can
in
theory
be
made
out
of
almost
anything
see
misconceptions
section
and
mechanical
examples
of
computers
have
existed
through
much
of
recorded
human
history
the
first
electronic
computers
were
developed
in
the
mid
th
century
Originally
they
were
the
size
of
a
large
room
consuming
as
much
power
as
several
hundred
modern
personal
computers
PCs
Modern
computers
based
on
integrated
circuits
are
millions
to
billions
of
times
more
capable
than
the
early
machines
and
occupy
a
fraction
of
the
space
Simple
computers
are
small
enough
to
fit
into
mobile
devices
and
can
be
powered
by
a
small
battery
Personal
computers
in
their
various
forms
are
icons
of
the
Information
Age
and
are
what
most
people
think
of
as
computers
However
the
embedded
computers
found
in
many
devices
from
MP
players
to
fighter
aircraft
and
from
toys
to
industrial
robots
are
the
most
numerous
Contents
hide
Misconceptions
Required
technology
Computer
architecture
paradigms
Limited
function
computers
Virtual
computers
History
of
computing
Limited
function
ancient
computers
First
general
purpose
computers
Stored
program
architecture
Semiconductors
and
microprocessors
Programs
Stored
program
architecture
Bugs
Machine
code
Higher
level
languages
and
program
design
Function
Control
unit
Arithmetic
logic
unit
ALU
Memory
Input
output
I
O
Multitasking
Multiprocessing
Networking
and
the
Internet
Further
topics
Artificial
intelligence
Hardware
Software
Programming
languages
Professions
and
organizations
See
also
Notes
References
External
links
Misconceptions
A
computer
does
not
need
to
be
electric
nor
even
have
a
processor
nor
RAM
nor
even
hard
disk
The
minimal
definition
of
a
computer
is
anything
that
transforms
information
in
a
purposeful
way
Required
technology
Main
article
Unconventional
computing
Computational
systems
as
flexible
as
a
personal
computer
can
be
built
out
of
almost
anything
For
example
a
computer
can
be
made
out
of
billiard
balls
billiard
ball
computer
this
is
an
unintuitive
and
pedagogical
example
that
a
computer
can
be
made
out
of
almost
anything
More
realistically
modern
computers
are
made
out
of
transistors
made
of
photolithographed
semiconductors
Historically
computers
evolved
from
mechanical
computers
and
eventually
from
vacuum
tube
transistors
There
is
active
research
to
make
computers
out
of
many
promising
new
types
of
technology
such
as
optical
computing
DNA
computers
neural
computers
and
quantum
computers
Some
of
these
can
easily
tackle
problems
that
modern
computers
cannot
such
as
how
quantum
computers
can
break
some
modern
encryption
algorithms
by
quantum
factoring
Computer
architecture
paradigms
Some
different
paradigms
of
how
to
build
a
computer
from
the
ground
up
RAM
machines
These
are
the
types
of
computers
with
a
CPU
computer
memory
etc
which
understand
basic
instructions
in
a
machine
language
The
concept
evolved
from
the
Turing
machine
Brains
Brains
are
massively
parallel
processors
made
of
neurons
wired
in
intricate
patterns
that
communicate
via
electricity
and
neurotransmitter
chemicals
Programming
languages
Such
as
the
lambda
calculus
or
modern
programming
languages
are
virtual
computers
built
on
top
of
other
computers
Cellular
automata
For
example
the
game
of
Life
can
create
gliders
and
loops
and
other
constructs
that
transmit
information
this
paradigm
can
be
applied
to
DNA
computing
chemical
computing
etc
Groups
and
committees
The
linking
of
multiple
computers
brains
is
itself
a
computer
Logic
gates
are
a
common
abstraction
which
can
apply
to
most
of
the
above
digital
or
analog
paradigms
The
ability
to
store
and
execute
lists
of
instructions
called
programs
makes
computers
extremely
versatile
distinguishing
them
from
calculators
The
Church
Turing
thesis
is
a
mathematical
statement
of
this
versatility
any
computer
with
a
certain
Turing
complete
is
in
principle
capable
of
performing
the
same
tasks
that
any
other
computer
can
perform
Therefore
any
type
of
computer
netbook
supercomputer
cellular
automaton
etc
is
able
to
perform
the
same
computational
tasks
given
enough
time
and
storage
capacity
Limited
function
computers
Conversely
a
computer
which
is
limited
in
function
one
that
is
not
Turing
complete
cannot
simulate
arbitrary
things
For
example
simple
four
function
calculators
cannot
simulate
a
real
computer
without
human
intervention
As
a
more
complicated
example
without
the
ability
to
program
a
gaming
console
it
can
never
accomplish
what
a
programmable
calculator
from
the
s
could
given
enough
time
the
system
as
a
whole
is
not
Turing
complete
even
though
it
contains
a
Turing
complete
component
the
microprocessor
Living
organisms
the
body
not
the
brain
are
also
limited
function
computers
designed
to
make
copies
of
themselves
they
cannot
be
reprogrammed
without
genetic
engineering
Virtual
computers
A
computer
is
commonly
considered
to
be
a
physical
device
However
one
can
create
a
computer
program
which
describes
how
to
run
a
different
computer
i
e
simulating
a
computer
in
a
computer
Not
only
is
this
a
constructive
proof
of
the
Church
Turing
thesis
but
is
also
extremely
common
in
all
modern
computers
For
example
some
programming
languages
use
something
called
an
interpreter
which
is
a
simulated
computer
built
on
top
of
the
basic
computer
this
allows
programmers
to
write
code
computer
input
in
a
different
language
than
the
one
understood
by
the
base
computer
the
alternative
is
to
use
a
compiler
Additionally
virtual
machines
are
simulated
computers
which
virtually
replicate
a
physical
computer
in
software
and
are
very
commonly
used
by
IT
Virtual
machines
are
also
a
common
technique
used
to
create
emulators
such
game
console
emulators
History
of
computing
Main
article
History
of
computing
hardware
The
first
use
of
the
word
computer
was
recorded
in
referring
to
a
person
who
carried
out
calculations
or
computations
and
the
word
continued
to
be
used
in
that
sense
until
the
middle
of
the
th
century
From
the
end
of
the
th
century
onwards
though
the
word
began
to
take
on
its
more
familiar
meaning
describing
a
machine
that
carries
out
computations
Limited
function
ancient
computers
The
Jacquard
loom
on
display
at
the
Museum
of
Science
and
Industry
in
Manchester
England
was
one
of
the
first
programmable
devices
The
history
of
the
modern
computer
begins
with
two
separate
technologies
automated
calculation
and
programmability
but
no
single
device
can
be
identified
as
the
earliest
computer
partly
because
of
the
inconsistent
application
of
that
term
Examples
of
early
mechanical
calculating
devices
include
the
abacus
the
slide
rule
and
arguably
the
astrolabe
and
the
Antikythera
mechanism
an
ancient
astronomical
computer
built
by
the
Greeks
around
BC
The
Greek
mathematician
Hero
of
Alexandria
c
AD
built
a
mechanical
theater
which
performed
a
play
lasting
minutes
and
was
operated
by
a
complex
system
of
ropes
and
drums
that
might
be
considered
to
be
a
means
of
deciding
which
parts
of
the
mechanism
performed
which
actions
and
when
This
is
the
essence
of
programmability
The
castle
clock
an
astronomical
clock
invented
by
Al
Jazari
in
is
considered
to
be
the
earliest
programmable
analog
computer
verification
needed
It
displayed
the
zodiac
the
solar
and
lunar
orbits
a
crescent
moon
shaped
pointer
travelling
across
a
gateway
causing
automatic
doors
to
open
every
hour
and
five
robotic
musicians
who
played
music
when
struck
by
levers
operated
by
a
camshaft
attached
to
a
water
wheel
The
length
of
day
and
night
could
be
re
programmed
to
compensate
for
the
changing
lengths
of
day
and
night
throughout
the
year
The
Renaissance
saw
a
re
invigoration
of
European
mathematics
and
engineering
Wilhelm
Schickard
s
device
was
the
first
of
a
number
of
mechanical
calculators
constructed
by
European
engineers
but
none
fit
the
modern
definition
of
a
computer
because
they
could
not
be
programmed
First
general
purpose
computers
In
Joseph
Marie
Jacquard
made
an
improvement
to
the
textile
loom
by
introducing
a
series
of
punched
paper
cards
as
a
template
which
allowed
his
loom
to
weave
intricate
patterns
automatically
The
resulting
Jacquard
loom
was
an
important
step
in
the
development
of
computers
because
the
use
of
punched
cards
to
define
woven
patterns
can
be
viewed
as
an
early
albeit
limited
form
of
programmability
It
was
the
fusion
of
automatic
calculation
with
programmability
that
produced
the
first
recognizable
computers
In
Charles
Babbage
was
the
first
to
conceptualize
and
design
a
fully
programmable
mechanical
computer
his
analytical
engine
Limited
finances
and
Babbage
s
inability
to
resist
tinkering
with
the
design
meant
that
the
device
was
never
completed
In
the
late
s
Herman
Hollerith
invented
the
recording
of
data
on
a
machine
readable
medium
Prior
uses
of
machine
readable
media
above
had
been
for
control
not
data
After
some
initial
trials
with
paper
tape
he
settled
on
punched
cards
To
process
these
punched
cards
he
invented
the
tabulator
and
the
keypunch
machines
These
three
inventions
were
the
foundation
of
the
modern
information
processing
industry
Large
scale
automated
data
processing
of
punched
cards
was
performed
for
the
United
States
Census
by
Hollerith
s
company
which
later
became
the
core
of
IBM
By
the
end
of
the
th
century
a
number
of
technologies
that
would
later
prove
useful
in
the
realization
of
practical
computers
had
begun
to
appear
the
punched
card
Boolean
algebra
the
vacuum
tube
thermionic
valve
and
the
teleprinter
During
the
first
half
of
the
th
century
many
scientific
computing
needs
were
met
by
increasingly
sophisticated
analog
computers
which
used
a
direct
mechanical
or
electrical
model
of
the
problem
as
a
basis
for
computation
However
these
were
not
programmable
and
generally
lacked
the
versatility
and
accuracy
of
modern
digital
computers
Alan
Turing
is
widely
regarded
to
be
the
father
of
modern
computer
science
In
Turing
provided
an
influential
formalisation
of
the
concept
of
the
algorithm
and
computation
with
the
Turing
machine
providing
a
blueprint
for
the
electronic
digital
computer
Of
his
role
in
the
creation
of
the
modern
computer
Time
magazine
in
naming
Turing
one
of
the
most
influential
people
of
the
th
century
states
The
fact
remains
that
everyone
who
taps
at
a
keyboard
opening
a
spreadsheet
or
a
word
processing
program
is
working
on
an
incarnation
of
a
Turing
machine
The
Zuse
Z
considered
the
world
s
first
working
programmable
fully
automatic
computing
machine
The
ENIAC
which
became
operational
in
is
considered
to
be
the
first
general
purpose
electronic
computer
EDSAC
was
one
of
the
first
computers
to
implement
the
stored
program
von
Neumann
architecture
Die
of
an
Intel
DX
microprocessor
actual
size
mm
in
its
packaging
The
inventor
of
the
program
controlled
computer
was
Konrad
Zuse
who
built
the
first
working
computer
in
and
later
in
the
first
computer
based
on
magnetic
storage
George
Stibitz
is
internationally
recognized
as
a
father
of
the
modern
digital
computer
While
working
at
Bell
Labs
in
November
Stibitz
invented
and
built
a
relay
based
calculator
he
dubbed
the
Model
K
for
kitchen
table
on
which
he
had
assembled
it
which
was
the
first
to
use
binary
circuits
to
perform
an
arithmetic
operation
Later
models
added
greater
sophistication
including
complex
arithmetic
and
programmability
A
succession
of
steadily
more
powerful
and
flexible
computing
devices
were
constructed
in
the
s
and
s
gradually
adding
the
key
features
that
are
seen
in
modern
computers
The
use
of
digital
electronics
largely
invented
by
Claude
Shannon
in
and
more
flexible
programmability
were
vitally
important
steps
but
defining
one
point
along
this
road
as
the
first
digital
electronic
computer
is
difficult
Shannon
Notable
achievements
include
Konrad
Zuse
s
electromechanical
Z
machines
The
Z
was
the
first
working
machine
featuring
binary
arithmetic
including
floating
point
arithmetic
and
a
measure
of
programmability
In
the
Z
was
proved
to
be
Turing
complete
therefore
being
the
world
s
first
operational
computer
The
non
programmable
Atanasoff
Berry
Computer
which
used
vacuum
tube
based
computation
binary
numbers
and
regenerative
capacitor
memory
The
use
of
regenerative
memory
allowed
it
to
be
much
more
compact
than
its
peers
being
approximately
the
size
of
a
large
desk
or
workbench
since
intermediate
results
could
be
stored
and
then
fed
back
into
the
same
set
of
computation
elements
The
secret
British
Colossus
computers
which
had
limited
programmability
but
demonstrated
that
a
device
using
thousands
of
tubes
could
be
reasonably
reliable
and
electronically
reprogrammable
It
was
used
for
breaking
German
wartime
codes
The
Harvard
Mark
I
a
large
scale
electromechanical
computer
with
limited
programmability
The
U
S
Army
s
Ballistic
Research
Laboratory
ENIAC
which
used
decimal
arithmetic
and
is
sometimes
called
the
first
general
purpose
electronic
computer
since
Konrad
Zuse
s
Z
of
used
electromagnets
instead
of
electronics
Initially
however
ENIAC
had
an
inflexible
architecture
which
essentially
required
rewiring
to
change
its
programming
Stored
program
architecture
Several
developers
of
ENIAC
recognizing
its
flaws
came
up
with
a
far
more
flexible
and
elegant
design
which
came
to
be
known
as
the
stored
program
architecture
or
von
Neumann
architecture
This
design
was
first
formally
described
by
John
von
Neumann
in
the
paper
First
Draft
of
a
Report
on
the
EDVAC
distributed
in
A
number
of
projects
to
develop
computers
based
on
the
stored
program
architecture
commenced
around
this
time
the
first
of
these
being
completed
in
Great
Britain
The
first
working
prototype
to
be
demonstrated
was
the
Manchester
Small
Scale
Experimental
Machine
SSEM
or
Baby
in
The
Electronic
Delay
Storage
Automatic
Calculator
EDSAC
completed
a
year
after
the
SSEM
at
Cambridge
University
was
the
first
practical
non
experimental
implementation
of
the
stored
program
design
and
was
put
to
use
immediately
for
research
work
at
the
university
Shortly
thereafter
the
machine
originally
described
by
von
Neumann
s
paper
EDVAC
was
completed
but
did
not
see
full
time
use
for
an
additional
two
years
Nearly
all
modern
computers
implement
some
form
of
the
stored
program
architecture
making
it
the
single
trait
by
which
the
word
computer
is
now
defined
While
the
technologies
used
in
computers
have
changed
dramatically
since
the
first
electronic
general
purpose
computers
of
the
s
most
still
use
the
von
Neumann
architecture
Beginning
in
the
s
Soviet
scientists
Sergei
Sobolev
and
Nikolay
Brusentsov
conducted
research
on
ternary
computers
devices
that
operated
on
a
base
three
numbering
system
of
and
rather
than
the
conventional
binary
numbering
system
upon
which
most
computers
are
based
They
designed
the
Setun
a
functional
ternary
computer
at
Moscow
State
University
The
device
was
put
into
limited
production
in
the
Soviet
Union
but
supplanted
by
the
more
common
binary
architecture
Semiconductors
and
microprocessors
Computers
using
vacuum
tubes
as
their
electronic
elements
were
in
use
throughout
the
s
but
by
the
s
had
been
largely
replaced
by
transistor
based
machines
which
were
smaller
faster
cheaper
to
produce
required
less
power
and
were
more
reliable
The
first
transistorised
computer
was
demonstrated
at
the
University
of
Manchester
in
In
the
s
integrated
circuit
technology
and
the
subsequent
creation
of
microprocessors
such
as
the
Intel
further
decreased
size
and
cost
and
further
increased
speed
and
reliability
of
computers
By
the
late
s
many
products
such
as
video
recorders
contained
dedicated
computers
called
microcontrollers
and
they
started
to
appear
as
a
replacement
to
mechanical
controls
in
domestic
appliances
such
as
washing
machines
The
s
witnessed
home
computers
and
the
now
ubiquitous
personal
computer
With
the
evolution
of
the
Internet
personal
computers
are
becoming
as
common
as
the
television
and
the
telephone
in
the
household
citation
needed
Modern
smartphones
are
fully
programmable
computers
in
their
own
right
and
as
of
may
well
be
the
most
common
form
of
such
computers
in
existence
citation
needed
Programs
The
defining
feature
of
modern
computers
which
distinguishes
them
from
all
other
machines
is
that
they
can
be
programmed
That
is
to
say
that
some
type
of
instructions
the
program
can
be
given
to
the
computer
and
it
will
carry
process
them
While
some
computers
may
have
strange
concepts
instructions
and
output
see
quantum
computing
modern
computers
based
on
the
von
Neumann
architecture
are
often
have
machine
code
in
the
form
of
an
imperative
programming
language
In
practical
terms
a
computer
program
may
be
just
a
few
instructions
or
extend
to
many
millions
of
instructions
as
do
the
programs
for
word
processors
and
web
browsers
for
example
A
typical
modern
computer
can
execute
billions
of
instructions
per
second
gigaflops
and
rarely
makes
a
mistake
over
many
years
of
operation
Large
computer
programs
consisting
of
several
million
instructions
may
take
teams
of
programmers
years
to
write
and
due
to
the
complexity
of
the
task
almost
certainly
contain
errors
Stored
program
architecture
Main
articles
Computer
program
and
Computer
programming
A
s
punched
card
containing
one
line
from
a
FORTRAN
program
The
card
reads
Z
Y
W
and
is
labelled
PROJ
for
identification
purposes
This
section
applies
to
most
common
RAM
machine
based
computers
In
most
cases
computer
instructions
are
simple
add
one
number
to
another
move
some
data
from
one
location
to
another
send
a
message
to
some
external
device
etc
These
instructions
are
read
from
the
computer
s
memory
and
are
generally
carried
out
executed
in
the
order
they
were
given
However
there
are
usually
specialized
instructions
to
tell
the
computer
to
jump
ahead
or
backwards
to
some
other
place
in
the
program
and
to
carry
on
executing
from
there
These
are
called
jump
instructions
or
branches
Furthermore
jump
instructions
may
be
made
to
happen
conditionally
so
that
different
sequences
of
instructions
may
be
used
depending
on
the
result
of
some
previous
calculation
or
some
external
event
Many
computers
directly
support
subroutines
by
providing
a
type
of
jump
that
remembers
the
location
it
jumped
from
and
another
instruction
to
return
to
the
instruction
following
that
jump
instruction
Program
execution
might
be
likened
to
reading
a
book
While
a
person
will
normally
read
each
word
and
line
in
sequence
they
may
at
times
jump
back
to
an
earlier
place
in
the
text
or
skip
sections
that
are
not
of
interest
Similarly
a
computer
may
sometimes
go
back
and
repeat
the
instructions
in
some
section
of
the
program
over
and
over
again
until
some
internal
condition
is
met
This
is
called
the
flow
of
control
within
the
program
and
it
is
what
allows
the
computer
to
perform
tasks
repeatedly
without
human
intervention
Comparatively
a
person
using
a
pocket
calculator
can
perform
a
basic
arithmetic
operation
such
as
adding
two
numbers
with
just
a
few
button
presses
But
to
add
together
all
of
the
numbers
from
to
would
take
thousands
of
button
presses
and
a
lot
of
time
with
a
near
certainty
of
making
a
mistake
On
the
other
hand
a
computer
may
be
programmed
to
do
this
with
just
a
few
simple
instructions
For
example
mov
sum
set
sum
to
mov
num
set
num
to
loop
add
num
sum
add
num
to
sum
add
num
add
to
num
cmp
num
compare
num
to
ble
loop
if
num
go
back
to
loop
halt
end
of
program
stop
running
Once
told
to
run
this
program
the
computer
will
perform
the
repetitive
addition
task
without
further
human
intervention
It
will
almost
never
make
a
mistake
and
a
modern
PC
can
complete
the
task
in
about
a
millionth
of
a
second
Bugs
Errors
in
computer
programs
are
called
bugs
Bugs
may
be
benign
and
not
affect
the
usefulness
of
the
program
or
have
only
subtle
effects
But
in
some
cases
they
may
cause
the
program
to
hang
become
unresponsive
to
input
such
as
mouse
clicks
or
keystrokes
or
to
completely
fail
or
crash
Otherwise
benign
bugs
may
sometimes
may
be
harnessed
for
malicious
intent
by
an
unscrupulous
user
writing
an
exploit
code
designed
to
take
advantage
of
a
bug
and
disrupt
a
computer
s
proper
execution
Bugs
are
usually
not
the
fault
of
the
computer
Since
computers
merely
execute
the
instructions
they
are
given
bugs
are
nearly
always
the
result
of
programmer
error
or
an
oversight
made
in
the
program
s
design
Machine
code
In
most
computers
individual
instructions
are
stored
as
machine
code
with
each
instruction
being
given
a
unique
number
its
operation
code
or
opcode
for
short
The
command
to
add
two
numbers
together
would
have
one
opcode
the
command
to
multiply
them
would
have
a
different
opcode
and
so
on
The
simplest
computers
are
able
to
perform
any
of
a
handful
of
different
instructions
the
more
complex
computers
have
several
hundred
to
choose
from
each
with
a
unique
numerical
code
Since
the
computer
s
memory
is
able
to
store
numbers
it
can
also
store
the
instruction
codes
This
leads
to
the
important
fact
that
entire
programs
which
are
just
lists
of
these
instructions
can
be
represented
as
lists
of
numbers
and
can
themselves
be
manipulated
inside
the
computer
in
the
same
way
as
numeric
data
The
fundamental
concept
of
storing
programs
in
the
computer
s
memory
alongside
the
data
they
operate
on
is
the
crux
of
the
von
Neumann
or
stored
program
architecture
In
some
cases
a
computer
might
store
some
or
all
of
its
program
in
memory
that
is
kept
separate
from
the
data
it
operates
on
This
is
called
the
Harvard
architecture
after
the
Harvard
Mark
I
computer
Modern
von
Neumann
computers
display
some
traits
of
the
Harvard
architecture
in
their
designs
such
as
in
CPU
caches
While
it
is
possible
to
write
computer
programs
as
long
lists
of
numbers
machine
language
and
while
this
technique
was
used
with
many
early
computers
it
is
extremely
tedious
and
potentially
error
prone
to
do
so
in
practice
especially
for
complicated
programs
Instead
each
basic
instruction
can
be
given
a
short
name
that
is
indicative
of
its
function
and
easy
to
remember
a
mnemonic
such
as
ADD
SUB
MULT
or
JUMP
These
mnemonics
are
collectively
known
as
a
computer
s
assembly
language
Converting
programs
written
in
assembly
language
into
something
the
computer
can
actually
understand
machine
language
is
usually
done
by
a
computer
program
called
an
assembler
Machine
languages
and
the
assembly
languages
that
represent
them
collectively
termed
low
level
programming
languages
tend
to
be
unique
to
a
particular
type
of
computer
For
instance
an
ARM
architecture
computer
such
as
may
be
found
in
a
PDA
or
a
hand
held
videogame
cannot
understand
the
machine
language
of
an
Intel
Pentium
or
the
AMD
Athlon
computer
that
might
be
in
a
PC
Higher
level
languages
and
program
design
Though
considerably
easier
than
in
machine
language
writing
long
programs
in
assembly
language
is
often
difficult
and
is
also
error
prone
Therefore
most
practical
programs
are
written
in
more
abstract
high
level
programming
languages
that
are
able
to
express
the
needs
of
the
programmer
more
conveniently
and
thereby
help
reduce
programmer
error
High
level
languages
are
usually
compiled
into
machine
language
or
sometimes
into
assembly
language
and
then
into
machine
language
using
another
computer
program
called
a
compiler
High
level
languages
are
less
related
to
the
workings
of
the
target
computer
than
assembly
language
and
more
related
to
the
language
and
structure
of
the
problem
s
to
be
solved
by
the
final
program
It
is
therefore
often
possible
to
use
different
compilers
to
translate
the
same
high
level
language
program
into
the
machine
language
of
many
different
types
of
computer
This
is
part
of
the
means
by
which
software
like
video
games
may
be
made
available
for
different
computer
architectures
such
as
personal
computers
and
various
video
game
consoles
The
task
of
developing
large
software
systems
presents
a
significant
intellectual
challenge
Producing
software
with
an
acceptably
high
reliability
within
a
predictable
schedule
and
budget
has
historically
been
difficult
the
academic
and
professional
discipline
of
software
engineering
concentrates
specifically
on
this
challenge
Function
Main
articles
Central
processing
unit
and
Microprocessor
A
general
purpose
computer
has
four
main
components
the
arithmetic
logic
unit
ALU
the
control
unit
the
memory
and
the
input
and
output
devices
collectively
termed
I
O
These
parts
are
interconnected
by
busses
often
made
of
groups
of
wires
Inside
each
of
these
parts
are
thousands
to
trillions
of
small
electrical
circuits
which
can
be
turned
off
or
on
by
means
of
an
electronic
switch
Each
circuit
represents
a
bit
binary
digit
of
information
so
that
when
the
circuit
is
on
it
represents
a
and
when
off
it
represents
a
in
positive
logic
representation
The
circuits
are
arranged
in
logic
gates
so
that
one
or
more
of
the
circuits
may
control
the
state
of
one
or
more
of
the
other
circuits
The
control
unit
ALU
registers
and
basic
I
O
and
often
other
hardware
closely
linked
with
these
are
collectively
known
as
a
central
processing
unit
CPU
Early
CPUs
were
composed
of
many
separate
components
but
since
the
mid
s
CPUs
have
typically
been
constructed
on
a
single
integrated
circuit
called
a
microprocessor
Control
unit
Main
articles
CPU
design
and
Control
unit
Diagram
showing
how
a
particular
MIPS
architecture
instruction
would
be
decoded
by
the
control
system
The
control
unit
often
called
a
control
system
or
central
controller
manages
the
computer
s
various
components
it
reads
and
interprets
decodes
the
program
instructions
transforming
them
into
a
series
of
control
signals
which
activate
other
parts
of
the
computer
Control
systems
in
advanced
computers
may
change
the
order
of
some
instructions
so
as
to
improve
performance
A
key
component
common
to
all
CPUs
is
the
program
counter
a
special
memory
cell
a
register
that
keeps
track
of
which
location
in
memory
the
next
instruction
is
to
be
read
from
The
control
system
s
function
is
as
follows
note
that
this
is
a
simplified
description
and
some
of
these
steps
may
be
performed
concurrently
or
in
a
different
order
depending
on
the
type
of
CPU
Read
the
code
for
the
next
instruction
from
the
cell
indicated
by
the
program
counter
Decode
the
numerical
code
for
the
instruction
into
a
set
of
commands
or
signals
for
each
of
the
other
systems
Increment
the
program
counter
so
it
points
to
the
next
instruction
Read
whatever
data
the
instruction
requires
from
cells
in
memory
or
perhaps
from
an
input
device
The
location
of
this
required
data
is
typically
stored
within
the
instruction
code
Provide
the
necessary
data
to
an
ALU
or
register
If
the
instruction
requires
an
ALU
or
specialized
hardware
to
complete
instruct
the
hardware
to
perform
the
requested
operation
Write
the
result
from
the
ALU
back
to
a
memory
location
or
to
a
register
or
perhaps
an
output
device
Jump
back
to
step
Since
the
program
counter
is
conceptually
just
another
set
of
memory
cells
it
can
be
changed
by
calculations
done
in
the
ALU
Adding
to
the
program
counter
would
cause
the
next
instruction
to
be
read
from
a
place
locations
further
down
the
program
Instructions
that
modify
the
program
counter
are
often
known
as
jumps
and
allow
for
loops
instructions
that
are
repeated
by
the
computer
and
often
conditional
instruction
execution
both
examples
of
control
flow
It
is
noticeable
that
the
sequence
of
operations
that
the
control
unit
goes
through
to
process
an
instruction
is
in
itself
like
a
short
computer
program
and
indeed
in
some
more
complex
CPU
designs
there
is
another
yet
smaller
computer
called
a
microsequencer
that
runs
a
microcode
program
that
causes
all
of
these
events
to
happen
Arithmetic
logic
unit
ALU
Main
article
Arithmetic
logic
unit
The
ALU
is
capable
of
performing
two
classes
of
operations
arithmetic
and
logic
The
set
of
arithmetic
operations
that
a
particular
ALU
supports
may
be
limited
to
adding
and
subtracting
or
might
include
multiplying
or
dividing
trigonometry
functions
sine
cosine
etc
and
square
roots
Some
can
only
operate
on
whole
numbers
integers
whilst
others
use
floating
point
to
represent
real
numbers
albeit
with
limited
precision
However
any
computer
that
is
capable
of
performing
just
the
simplest
operations
can
be
programmed
to
break
down
the
more
complex
operations
into
simple
steps
that
it
can
perform
Therefore
any
computer
can
be
programmed
to
perform
any
arithmetic
operation
although
it
will
take
more
time
to
do
so
if
its
ALU
does
not
directly
support
the
operation
An
ALU
may
also
compare
numbers
and
return
boolean
truth
values
true
or
false
depending
on
whether
one
is
equal
to
greater
than
or
less
than
the
other
is
greater
than
Logic
operations
involve
Boolean
logic
AND
OR
XOR
and
NOT
These
can
be
useful
both
for
creating
complicated
conditional
statements
and
processing
boolean
logic
Superscalar
computers
may
contain
multiple
ALUs
so
that
they
can
process
several
instructions
at
the
same
time
Graphics
processors
and
computers
with
SIMD
and
MIMD
features
often
provide
ALUs
that
can
perform
arithmetic
on
vectors
and
matrices
Memory
Main
article
Computer
data
storage
Magnetic
core
memory
was
the
computer
memory
of
choice
throughout
the
s
until
it
was
replaced
by
semiconductor
memory
A
computer
s
memory
can
be
viewed
as
a
list
of
cells
into
which
numbers
can
be
placed
or
read
Each
cell
has
a
numbered
address
and
can
store
a
single
number
The
computer
can
be
instructed
to
put
the
number
into
the
cell
numbered
or
to
add
the
number
that
is
in
cell
to
the
number
that
is
in
cell
and
put
the
answer
into
cell
The
information
stored
in
memory
may
represent
practically
anything
Letters
numbers
even
computer
instructions
can
be
placed
into
memory
with
equal
ease
Since
the
CPU
does
not
differentiate
between
different
types
of
information
it
is
the
software
s
responsibility
to
give
significance
to
what
the
memory
sees
as
nothing
but
a
series
of
numbers
In
almost
all
modern
computers
each
memory
cell
is
set
up
to
store
binary
numbers
in
groups
of
eight
bits
called
a
byte
Each
byte
is
able
to
represent
different
numbers
either
from
to
or
to
To
store
larger
numbers
several
consecutive
bytes
may
be
used
typically
two
four
or
eight
When
negative
numbers
are
required
they
are
usually
stored
in
two
s
complement
notation
Other
arrangements
are
possible
but
are
usually
not
seen
outside
of
specialized
applications
or
historical
contexts
A
computer
can
store
any
kind
of
information
in
memory
if
it
can
be
represented
numerically
Modern
computers
have
billions
or
even
trillions
of
bytes
of
memory
The
CPU
contains
a
special
set
of
memory
cells
called
registers
that
can
be
read
and
written
to
much
more
rapidly
than
the
main
memory
area
There
are
typically
between
two
and
one
hundred
registers
depending
on
the
type
of
CPU
Registers
are
used
for
the
most
frequently
needed
data
items
to
avoid
having
to
access
main
memory
every
time
data
is
needed
As
data
is
constantly
being
worked
on
reducing
the
need
to
access
main
memory
which
is
often
slow
compared
to
the
ALU
and
control
units
greatly
increases
the
computer
s
speed
Computer
main
memory
comes
in
two
principal
varieties
random
access
memory
or
RAM
and
read
only
memory
or
ROM
RAM
can
be
read
and
written
to
anytime
the
CPU
commands
it
but
ROM
is
pre
loaded
with
data
and
software
that
never
changes
so
the
CPU
can
only
read
from
it
ROM
is
typically
used
to
store
the
computer
s
initial
start
up
instructions
In
general
the
contents
of
RAM
are
erased
when
the
power
to
the
computer
is
turned
off
but
ROM
retains
its
data
indefinitely
In
a
PC
the
ROM
contains
a
specialized
program
called
the
BIOS
that
orchestrates
loading
the
computer
s
operating
system
from
the
hard
disk
drive
into
RAM
whenever
the
computer
is
turned
on
or
reset
In
embedded
computers
which
frequently
do
not
have
disk
drives
all
of
the
required
software
may
be
stored
in
ROM
Software
stored
in
ROM
is
often
called
firmware
because
it
is
notionally
more
like
hardware
than
software
Flash
memory
blurs
the
distinction
between
ROM
and
RAM
as
it
retains
its
data
when
turned
off
but
is
also
rewritable
It
is
typically
much
slower
than
conventional
ROM
and
RAM
however
so
its
use
is
restricted
to
applications
where
high
speed
is
unnecessary
In
more
sophisticated
computers
there
may
be
one
or
more
RAM
cache
memories
which
are
slower
than
registers
but
faster
than
main
memory
Generally
computers
with
this
sort
of
cache
are
designed
to
move
frequently
needed
data
into
the
cache
automatically
often
without
the
need
for
any
intervention
on
the
programmer
s
part
Input
output
I
O
Main
article
Input
output
Hard
disk
drives
are
common
storage
devices
used
with
computers
I
O
is
the
means
by
which
a
computer
exchanges
information
with
the
outside
world
Devices
that
provide
input
or
output
to
the
computer
are
called
peripherals
On
a
typical
personal
computer
peripherals
include
input
devices
like
the
keyboard
and
mouse
and
output
devices
such
as
the
display
and
printer
Hard
disk
drives
floppy
disk
drives
and
optical
disc
drives
serve
as
both
input
and
output
devices
Computer
networking
is
another
form
of
I
O
Often
I
O
devices
are
complex
computers
in
their
own
right
with
their
own
CPU
and
memory
A
graphics
processing
unit
might
contain
fifty
or
more
tiny
computers
that
perform
the
calculations
necessary
to
display
D
graphics
citation
needed
Modern
desktop
computers
contain
many
smaller
computers
that
assist
the
main
CPU
in
performing
I
O
Multitasking
Main
article
Computer
multitasking
While
a
computer
may
be
viewed
as
running
one
gigantic
program
stored
in
its
main
memory
in
some
systems
it
is
necessary
to
give
the
appearance
of
running
several
programs
simultaneously
This
is
achieved
by
multitasking
i
e
having
the
computer
switch
rapidly
between
running
each
program
in
turn
One
means
by
which
this
is
done
is
with
a
special
signal
called
an
interrupt
which
can
periodically
cause
the
computer
to
stop
executing
instructions
where
it
was
and
do
something
else
instead
By
remembering
where
it
was
executing
prior
to
the
interrupt
the
computer
can
return
to
that
task
later
If
several
programs
are
running
at
the
same
time
then
the
interrupt
generator
might
be
causing
several
hundred
interrupts
per
second
causing
a
program
switch
each
time
Since
modern
computers
typically
execute
instructions
several
orders
of
magnitude
faster
than
human
perception
it
may
appear
that
many
programs
are
running
at
the
same
time
even
though
only
one
is
ever
executing
in
any
given
instant
This
method
of
multitasking
is
sometimes
termed
time
sharing
since
each
program
is
allocated
a
slice
of
time
in
turn
Before
the
era
of
cheap
computers
the
principle
use
for
multitasking
was
to
allow
many
people
to
share
the
same
computer
Seemingly
multitasking
would
cause
a
computer
that
is
switching
between
several
programs
to
run
more
slowly
in
direct
proportion
to
the
number
of
programs
it
is
running
However
most
programs
spend
much
of
their
time
waiting
for
slow
input
output
devices
to
complete
their
tasks
If
a
program
is
waiting
for
the
user
to
click
on
the
mouse
or
press
a
key
on
the
keyboard
then
it
will
not
take
a
time
slice
until
the
event
it
is
waiting
for
has
occurred
This
frees
up
time
for
other
programs
to
execute
so
that
many
programs
may
be
run
at
the
same
time
without
unacceptable
speed
loss
Multiprocessing
Main
article
Multiprocessing
Cray
designed
many
supercomputers
that
used
multiprocessing
heavily
Some
computers
are
designed
to
distribute
their
work
across
several
CPUs
in
a
multiprocessing
configuration
a
technique
once
employed
only
in
large
and
powerful
machines
such
as
supercomputers
mainframe
computers
and
servers
Multiprocessor
and
multi
core
multiple
CPUs
on
a
single
integrated
circuit
personal
and
laptop
computers
are
now
widely
available
and
are
being
increasingly
used
in
lower
end
markets
as
a
result
Supercomputers
in
particular
often
have
highly
unique
architectures
that
differ
significantly
from
the
basic
stored
program
architecture
and
from
general
purpose
computers
They
often
feature
thousands
of
CPUs
customized
high
speed
interconnects
and
specialized
computing
hardware
Such
designs
tend
to
be
useful
only
for
specialized
tasks
due
to
the
large
scale
of
program
organization
required
to
successfully
utilize
most
of
the
available
resources
at
once
Supercomputers
usually
see
usage
in
large
scale
simulation
graphics
rendering
and
cryptography
applications
as
well
as
with
other
so
called
embarrassingly
parallel
tasks
Networking
and
the
Internet
Main
articles
Computer
networking
and
Internet
Visualization
of
a
portion
of
the
routes
on
the
Internet
Computers
have
been
used
to
coordinate
information
between
multiple
locations
since
the
s
The
U
S
military
s
SAGE
system
was
the
first
large
scale
example
of
such
a
system
which
led
to
a
number
of
special
purpose
commercial
systems
like
Sabre
In
the
s
computer
engineers
at
research
institutions
throughout
the
United
States
began
to
link
their
computers
together
using
telecommunications
technology
This
effort
was
funded
by
ARPA
now
DARPA
and
the
computer
network
that
it
produced
was
called
the
ARPANET
The
technologies
that
made
the
Arpanet
possible
spread
and
evolved
In
time
the
network
spread
beyond
academic
and
military
institutions
and
became
known
as
the
Internet
The
emergence
of
networking
involved
a
redefinition
of
the
nature
and
boundaries
of
the
computer
Computer
operating
systems
and
applications
were
modified
to
include
the
ability
to
define
and
access
the
resources
of
other
computers
on
the
network
such
as
peripheral
devices
stored
information
and
the
like
as
extensions
of
the
resources
of
an
individual
computer
Initially
these
facilities
were
available
primarily
to
people
working
in
high
tech
environments
but
in
the
s
the
spread
of
applications
like
e
mail
and
the
World
Wide
Web
combined
with
the
development
of
cheap
fast
networking
technologies
like
Ethernet
and
ADSL
saw
computer
networking
become
almost
ubiquitous
In
fact
the
number
of
computers
that
are
networked
is
growing
phenomenally
A
very
large
proportion
of
personal
computers
regularly
connect
to
the
Internet
to
communicate
and
receive
information
Wireless
networking
often
utilizing
mobile
phone
networks
has
meant
networking
is
becoming
increasingly
ubiquitous
even
in
mobile
computing
environments
Further
topics
Glossary
of
computers
Artificial
intelligence
A
computers
will
solve
problems
in
exactly
the
way
they
are
programmed
to
without
regard
to
efficiency
nor
alternative
solutions
nor
possible
shortcuts
nor
possible
errors
in
the
code
Computer
programs
which
learn
and
adapt
are
part
of
the
emerging
field
of
artificial
intelligence
and
machine
learning
Hardware
The
term
hardware
covers
all
of
those
parts
of
a
computer
that
are
tangible
objects
Circuits
displays
power
supplies
cables
keyboards
printers
and
mice
are
all
hardware
History
of
computing
hardware
First
Generation
Mechanical
Electromechanical
Calculators
Antikythera
mechanism
Difference
engine
Norden
bombsight
Programmable
Devices
Jacquard
loom
Analytical
engine
Harvard
Mark
I
Z
Second
Generation
Vacuum
Tubes
Calculators
Atanasoff
Berry
Computer
IBM
UNIVAC
UNIVAC
Programmable
Devices
Colossus
ENIAC
Manchester
Small
Scale
Experimental
Machine
EDSAC
Manchester
Mark
Ferranti
Pegasus
Ferranti
Mercury
CSIRAC
EDVAC
UNIVAC
I
IBM
IBM
IBM
Z
Third
Generation
Discrete
transistors
and
SSI
MSI
LSI
Integrated
circuits
Mainframes
IBM
IBM
IBM
System
BUNCH
Minicomputer
PDP
PDP
IBM
System
IBM
System
Fourth
Generation
VLSI
integrated
circuits
Minicomputer
VAX
IBM
System
i
bit
microcomputer
Intel
Intel
bit
microcomputer
Intel
Intel
Motorola
Motorola
MOS
Technology
Zilog
Z
bit
microcomputer
Intel
Zilog
Z
WDC
bit
microcomputer
Intel
Pentium
Motorola
ARM
architecture
bit
microcomputer
Alpha
MIPS
PA
RISC
PowerPC
SPARC
x
Embedded
computer
Intel
Intel
Personal
computer
Desktop
computer
Home
computer
Laptop
computer
Personal
digital
assistant
PDA
Portable
computer
Tablet
PC
Wearable
computer
Theoretical
experimental
Quantum
computer
Chemical
computer
DNA
computing
Optical
computer
Spintronics
based
computer
Other
Hardware
Topics
Peripheral
device
Input
output
Input
Mouse
Keyboard
Joystick
Image
scanner
Webcam
Graphics
tablet
Microphone
Output
Monitor
Printer
Loudspeaker
Both
Floppy
disk
drive
Hard
disk
drive
Optical
disc
drive
Teleprinter
Computer
busses
Short
range
RS
SCSI
PCI
USB
Long
range
Computer
networking
Ethernet
ATM
FDDI
Software
Main
article
Computer
software
Software
refers
to
parts
of
the
computer
which
do
not
have
a
material
form
such
as
programs
data
protocols
etc
When
software
is
stored
in
hardware
that
cannot
easily
be
modified
such
as
BIOS
ROM
in
an
IBM
PC
compatible
it
is
sometimes
called
firmware
to
indicate
that
it
falls
into
an
uncertain
area
somewhere
between
hardware
and
software
Computer
software
Operating
system
Unix
and
BSD
UNIX
System
V
IBM
AIX
HP
UX
Solaris
SunOS
IRIX
List
of
BSD
operating
systems
GNU
Linux
List
of
Linux
distributions
Comparison
of
Linux
distributions
Microsoft
Windows
Windows
Windows
Windows
NT
Windows
Windows
XP
Windows
Vista
Windows
DOS
DOS
QDOS
PC
DOS
MS
DOS
DR
DOS
FreeDOS
Mac
OS
Mac
OS
classic
Mac
OS
X
Embedded
and
real
time
List
of
embedded
operating
systems
Experimental
Amoeba
Oberon
Bluebottle
Plan
from
Bell
Labs
Library
Multimedia
DirectX
OpenGL
OpenAL
Programming
library
C
standard
library
Standard
Template
Library
Data
Protocol
TCP
IP
Kermit
FTP
HTTP
SMTP
File
format
HTML
XML
JPEG
MPEG
PNG
User
interface
Graphical
user
interface
WIMP
Microsoft
Windows
GNOME
KDE
QNX
Photon
CDE
GEM
Aqua
Text
based
user
interface
Command
line
interface
Text
user
interface
Application
Office
suite
Word
processing
Desktop
publishing
Presentation
program
Database
management
system
Scheduling
Time
management
Spreadsheet
Accounting
software
Internet
Access
Browser
E
mail
client
Web
server
Mail
transfer
agent
Instant
messaging
Design
and
manufacturing
Computer
aided
design
Computer
aided
manufacturing
Plant
management
Robotic
manufacturing
Supply
chain
management
Graphics
Raster
graphics
editor
Vector
graphics
editor
D
modeler
Animation
editor
D
computer
graphics
Video
editing
Image
processing
Audio
Digital
audio
editor
Audio
playback
Mixing
Audio
synthesis
Computer
music
Software
engineering
Compiler
Assembler
Interpreter
Debugger
Text
editor
Integrated
development
environment
Software
performance
analysis
Revision
control
Software
configuration
management
Educational
Edutainment
Educational
game
Serious
game
Flight
simulator
Games
Strategy
Arcade
Puzzle
Simulation
First
person
shooter
Platform
Massively
multiplayer
Interactive
fiction
Misc
Artificial
intelligence
Antivirus
software
Malware
scanner
Installer
Package
management
systems
File
manager
Programming
languages
Programming
languages
provide
various
ways
of
specifying
programs
for
computers
to
run
Unlike
natural
languages
programming
languages
are
designed
to
permit
no
ambiguity
and
to
be
concise
They
are
purely
written
languages
and
are
often
difficult
to
read
aloud
They
are
generally
either
translated
into
machine
code
by
a
compiler
or
an
assembler
before
being
run
or
translated
directly
at
run
time
by
an
interpreter
Sometimes
programs
are
executed
by
a
hybrid
method
of
the
two
techniques
There
are
thousands
of
different
programming
languages
some
intended
to
be
general
purpose
others
useful
only
for
highly
specialized
applications
Programming
languages
Lists
of
programming
languages
Timeline
of
programming
languages
List
of
programming
languages
by
category
Generational
list
of
programming
languages
List
of
programming
languages
Non
English
based
programming
languages
Commonly
used
Assembly
languages
ARM
MIPS
x
Commonly
used
high
level
programming
languages
Ada
BASIC
C
C
C
COBOL
Fortran
Java
Lisp
Pascal
Object
Pascal
Commonly
used
Scripting
languages
Bourne
script
JavaScript
Python
Ruby
PHP
Perl
Professions
and
organizations
As
the
use
of
computers
has
spread
throughout
society
there
are
an
increasing
number
of
careers
involving
computers
Computer
related
professions
Hardware
related
Electrical
engineering
Electronic
engineering
Computer
engineering
Telecommunications
engineering
Optical
engineering
Nanoengineering
Software
related
Computer
science
Desktop
publishing
Human
computer
interaction
Information
technology
Information
systems
Computational
science
Software
engineering
Video
game
industry
Web
design
The
need
for
computers
to
work
well
together
and
to
be
able
to
exchange
information
has
spawned
the
need
for
many
standards
organizations
clubs
and
societies
of
both
a
formal
and
informal
nature
Organizations
Standards
groups
ANSI
IEC
IEEE
IETF
ISO
W
C
Professional
Societies
ACM
AIS
IET
IFIP
BCS
Free
Open
source
software
groups
Free
Software
Foundation
Mozilla
Foundation
Apache
Software
Foundation
See
also
Information
technology
portal
Computability
theory
computer
science
Computer
security
and
Computer
insecurity
List
of
computer
term
etymologies
List
of
fictional
computers
Pulse
computer
Notes
In
ENIAC
required
an
estimated
kW
By
comparison
a
modern
laptop
computer
may
use
around
W
nearly
six
thousand
times
less
Approximate
Desktop
Notebook
Power
Usage
University
of
Pennsylvania
Retrieved
Early
computers
such
as
Colossus
and
ENIAC
were
able
to
process
between
and
operations
per
second
A
modern
commodity
microprocessor
as
of
can
process
billions
of
operations
per
second
and
many
of
these
operations
are
more
complicated
and
useful
than
early
computer
operations
Intel
Core
Duo
Mobile
Processor
Features
Intel
Corporation
Retrieved
computer
n
Oxford
English
Dictionary
ed
Oxford
University
Press
Retrieved
Discovering
How
Greeks
Computed
in
B
C
The
New
York
Times
July
Retrieved
March
Heron
of
Alexandria
Retrieved
a
b
Ancient
Discoveries
Episode
Ancient
Robots
History
Channel
http
www
youtube
com
watch
v
rxjbaQl
ad
Retrieved
Howard
R
Turner
Science
in
Medieval
Islam
An
Illustrated
Introduction
p
University
of
Texas
Press
ISBN
Donald
Routledge
Hill
Mechanical
Engineering
in
the
Medieval
Near
East
Scientific
American
May
pp
cf
Donald
Routledge
Hill
Mechanical
Engineering
The
analytical
engine
should
not
be
confused
with
Babbage
s
difference
engine
which
was
a
non
programmable
mechanical
calculator
Columbia
University
Computing
History
Herman
Hollerith
a
b
Alan
Turing
Time
People
of
the
Century
Time
Magazine
Retrieved
The
fact
remains
that
everyone
who
taps
at
a
keyboard
opening
a
spreadsheet
or
a
word
processing
program
is
working
on
an
incarnation
of
a
Turing
machine
Spiegel
The
inventor
of
the
computer
s
biography
was
published
Inventor
Profile
George
R
Stibitz
National
Inventors
Hall
of
Fame
Foundation
Inc
Rojas
R
How
to
make
Zuse
s
Z
a
universal
computer
IEEE
Annals
of
the
History
of
Computing
doi
B
Jack
Copeland
ed
Colossus
The
Secrets
of
Bletchley
Park
s
Codebreaking
Computers
Oxford
University
Press
Lavington
p
This
program
was
written
similarly
to
those
for
the
PDP
minicomputer
and
shows
some
typical
things
a
computer
can
do
All
the
text
after
the
semicolons
are
comments
for
the
benefit
of
human
readers
These
have
no
significance
to
the
computer
and
are
ignored
Digital
Equipment
Corporation
It
is
not
universally
true
that
bugs
are
solely
due
to
programmer
oversight
Computer
hardware
may
fail
or
may
itself
have
a
fundamental
problem
that
produces
unexpected
results
in
certain
situations
For
instance
the
Pentium
FDIV
bug
caused
some
Intel
microprocessors
in
the
early
s
to
produce
inaccurate
results
for
certain
floating
point
division
operations
This
was
caused
by
a
flaw
in
the
microprocessor
design
and
resulted
in
a
partial
recall
of
the
affected
devices
Even
some
later
computers
were
commonly
programmed
directly
in
machine
code
Some
minicomputers
like
the
DEC
PDP
could
be
programmed
directly
from
a
panel
of
switches
However
this
method
was
usually
used
only
as
part
of
the
booting
process
Most
modern
computers
boot
entirely
automatically
by
reading
a
boot
program
from
some
non
volatile
memory
However
there
is
sometimes
some
form
of
machine
language
compatibility
between
different
computers
An
x
compatible
microprocessor
like
the
AMD
Athlon
is
able
to
run
most
of
the
same
programs
that
an
Intel
Core
microprocessor
can
as
well
as
programs
designed
for
earlier
microprocessors
like
the
Intel
Pentiums
and
Intel
This
contrasts
with
very
early
commercial
computers
which
were
often
one
of
a
kind
and
totally
incompatible
with
other
computers
High
level
languages
are
also
often
interpreted
rather
than
compiled
Interpreted
languages
are
translated
into
machine
code
on
the
fly
while
running
by
another
program
called
an
interpreter
The
control
unit
s
role
in
interpreting
instructions
has
varied
somewhat
in
the
past
Although
the
control
unit
is
solely
responsible
for
instruction
interpretation
in
most
modern
computers
this
is
not
always
the
case
Many
computers
include
some
instructions
that
may
only
be
partially
interpreted
by
the
control
system
and
partially
interpreted
by
another
device
This
is
especially
the
case
with
specialized
computing
hardware
that
may
be
partially
self
contained
For
example
EDVAC
one
of
the
earliest
stored
program
computers
used
a
central
control
unit
that
only
interpreted
four
instructions
All
of
the
arithmetic
related
instructions
were
passed
on
to
its
arithmetic
unit
and
further
decoded
there
Instructions
often
occupy
more
than
one
memory
address
so
the
program
counters
usually
increases
by
the
number
of
memory
locations
required
to
store
one
instruction
David
J
Eck
The
Most
Complex
Machine
A
Survey
of
Computers
and
Computing
A
K
Peters
Ltd
p
ISBN
Erricos
John
Kontoghiorghes
Handbook
of
Parallel
Computing
and
Statistics
CRC
Press
p
ISBN
Flash
memory
also
may
only
be
rewritten
a
limited
number
of
times
before
wearing
out
making
it
less
useful
for
heavy
random
access
usage
Verma
Mielke
Donald
Eadie
Introduction
to
the
Basic
Computer
Prentice
Hall
p
Arpad
Barna
Dan
I
Porat
Introduction
to
Microcomputers
and
the
Microprocessors
Wiley
p
ISBN
Jerry
Peek
Grace
Todino
John
Strang
Learning
the
UNIX
Operating
System
A
Concise
Guide
for
the
New
User
O
Reilly
p
ISBN
Gillian
M
Davis
Noise
Reduction
in
Speech
Applications
CRC
Press
p
ISBN
However
it
is
also
very
common
to
construct
supercomputers
out
of
many
pieces
of
cheap
commodity
hardware
usually
individual
computers
connected
by
networks
These
so
called
computer
clusters
can
often
provide
supercomputer
performance
at
a
much
lower
cost
than
customized
designs
While
custom
architectures
are
still
used
for
most
of
the
most
powerful
supercomputers
there
has
been
a
proliferation
of
cluster
computers
in
recent
years
TOP
Agatha
C
Hughes
Systems
Experts
and
Computers
MIT
Press
p
ISBN
The
experience
of
SAGE
helped
make
possible
the
first
truly
large
scale
commercial
real
time
network
the
SABRE
computerized
airline
reservations
system
A
Brief
History
of
the
Internet
Internet
Society
Retrieved
Most
major
bit
instruction
set
architectures
are
extensions
of
earlier
designs
All
of
the
architectures
listed
in
this
table
except
for
Alpha
existed
in
bit
forms
before
their
bit
incarnations
were
introduced
References
a
Kempf
Karl
Historical
Monograph
Electronic
Computers
Within
the
Ordnance
Corps
Aberdeen
Proving
Ground
United
States
Army
a
Phillips
Tony
The
Antikythera
Mechanism
I
American
Mathematical
Society
Retrieved
a
Shannon
Claude
Elwood
A
symbolic
analysis
of
relay
and
switching
circuits
Massachusetts
Institute
of
Technology
Digital
Equipment
Corporation
PDF
PDP
Processor
Handbook
Maynard
MA
Digital
Equipment
Corporation
Verma
G
Mielke
N
Reliability
performance
of
ETOX
based
flash
memories
IEEE
International
Reliability
Physics
Symposium
Meuer
Hans
Strohmaier
Erich
Simon
Horst
Dongarra
Jack
Architectures
Share
Over
Time
TOP
Retrieved
Lavington
Simon
A
History
of
Manchester
Computers
ed
Swindon
The
British
Computer
Society
ISBN
Stokes
Jon
Inside
the
Machine
An
Illustrated
Introduction
to
Microprocessors
and
Computer
Architecture
San
Francisco
No
Starch
Press
ISBN
External
links
Find
more
about
Computer
on
Wikipedia
s
sister
projects
Definitions
from
Wiktionary
Textbooks
from
Wikibooks
Quotations
from
Wikiquote
Source
texts
from
Wikisource
Images
and
media
from
Commons
News
stories
from
Wikinews
Learning
resources
from
Wikiversity
Computer
mini
article
Categories
Computing
New
featuresLog
in
create
account
Article
Discussion
Read
View
source
View
history
Main
page
Contents
Featured
content
Current
events
Random
article
Donate
Interaction
About
Wikipedia
Community
portal
Recent
changes
Contact
Wikipedia
Help
Toolbox
Print
export
Languages
Acèh
Afrikaans
Alemannisch
Ænglisc
Aragonés
Asturianu
Azərbaycanca
Bân
lâm
gú
Башҡорт
Беларуская
Беларуская
тарашкевіца
Boarisch
Bosanski
Brezhoneg
Български
Català
Чӑвашла
Cebuano
Česky
Cymraeg
Dansk
Deutsch
Diné
bizaad
Eesti
Ελληνικά
Emiliàn
e
rumagnòl
Español
Esperanto
Euskara
Føroyskt
Français
Frysk
Furlan
Gaeilge
Gaelg
Gàidhlig
Galego
Hak
kâ
fa
Հայերեն
Hrvatski
Ido
Igbo
Bahasa
Indonesia
Interlingua
inuktitut
isiXhosa
Íslenska
Italiano
Basa
Jawa
Kapampangan
Къарачай
Малкъар
Қазақша
Kernewek
Кыргызча
Kiswahili
Kongo
Kurdî
Ladino
Latina
Latviešu
Lëtzebuergesch
Lietuvių
Limburgs
Lingála
Lojban
Lumbaart
Magyar
Македонски
Malagasy
Malti
Bahasa
Melayu
Mirandés
Монгол
Nāhuatl
Nederlands
Nedersaksisch
Nnapulitano
Norsk
bokmål
Norsk
nynorsk
Occitan
Олык
Марий
O
zbek
Plattdüütsch
Polski
Português
Română
Runa
Simi
Русский
Саха
тыла
Sardu
Scots
Seeltersk
Shqip
Sicilianu
Simple
English
Slovenčina
Словѣ
ньскъ
Slovenščina
Soomaaliga
Српски
Srpski
Srpskohrvatski
Српскохрватски
Suomi
Svenska
Tagalog
Татарча
Tatarça
Тоҷикӣ
Türkçe
Türkmençe
Українська
Vahcuengh
Vèneto
Tiếng
Việt
Võro
Walon
West
Vlams
Winaray
Wolof
Yorùbá
Zazaki
Žemaitėška
This
page
was
last
modified
on
September
at
Text
is
available
under
the
Creative
Commons
Attribution
ShareAlike
License
additional
terms
may
apply
See
Terms
of
Use
for
details
Wikipedia
is
a
registered
trademark
of
the
Wikimedia
Foundation
Inc
a
non
profit
organization
Contact
us